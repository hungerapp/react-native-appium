name: BrowserStack - E2E Tests

on:
  schedule:
    - cron: "0 16 * * *" # run every day at 16:00 UTC (00:00 Taiwan time)
  workflow_dispatch:
    inputs:
      tags:
        description: "要運行的測試標籤 (例如: regression, smoke)"
        required: false
        type: choice
        options:
          - "regression"
          - "smoke"
      platform:
        description: "測試平台 (android/ios)"
        required: true
        default: "android"
        type: choice
        options:
          - android
          - ios
      device_count:
        description: "並行設備數量"
        required: true
        type: choice
        options:
          - 1
          - 2
          - 3
          - 4
        default: "1"

env:
  PYTHON_VERSION: "3.9"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Test Directories
        run: |
          mkdir -p allure-results
          mkdir -p allure-report
          mkdir -p screenshots
          mkdir -p test-results

      - name: Set up environment variables
        run: |
          cat > .env << EOF
          TEST_ENV=github_actions
          IS_CI=true
          APPIUM_OS=${{ github.event.inputs.platform || 'android' }}
          BROWSERSTACK_USERNAME=${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY=${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          BROWSERSTACK_APP_ID=${{ (github.event.inputs.platform || 'android') == 'android' && secrets.BROWSERSTACK_ANDROID_APP_ID || secrets.BROWSERSTACK_IOS_APP_ID }}
          BROWSERSTACK_DEVICE_NAME=${{ (github.event.inputs.platform || 'android') == 'android' && 'Google Pixel 9' || 'iPhone 15 Pro' }}
          BROWSERSTACK_OS_VERSION=${{ (github.event.inputs.platform || 'android') == 'android' && '15.0' || '17.5' }}
          BROWSERSTACK_PROJECT_NAME=App E2E Tests
          BROWSERSTACK_BUILD_NAME=GitHub Actions Build
          BROWSERSTACK_SESSION_NAME=E2E Test Session
          BROWSERSTACK_HUB_URL=https://hub-cloud.browserstack.com/wd/hub
          DEVICE_COUNT=${{ github.event.inputs.device_count || '1' }}
          NO_RESET=True
          AUTO_ACCEPT_ALERTS=True
          IMPLICIT_WAIT=25
          PLATFORM_NAME=${{ (github.event.inputs.platform || 'android') == 'android' && 'Android' || 'iOS' }}
          AUTOMATION_NAME=${{ (github.event.inputs.platform || 'android') == 'android' && 'UiAutomator2' || 'XCUITest' }}
          EOF

      - name: Run tests
        run: |
          echo "Running ${{ github.event.inputs.platform || 'android' }} E2E tests..."

          # 安裝並啟動 BrowserStack 本地測試工具
          curl -L https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip -o BrowserStackLocal.zip
          unzip BrowserStackLocal.zip
          ./BrowserStackLocal --key ${{ secrets.BROWSERSTACK_ACCESS_KEY }} --daemon start

          # 運行測試
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tags }}" ]; then
            echo "Running manual trigger with tag: ${{ github.event.inputs.tags }}"
            python -m pytest -v -k "${{ github.event.inputs.tags }}" --alluredir=allure-results
          else
            if [ "${{ github.event.inputs.platform }}" = "ios" ]; then
              echo "Running iOS tests"
              python -m pytest -v tests/steps/ios/ --alluredir=allure-results
            else
              echo "Running Android tests"
              python -m pytest -v tests/steps/android/ --alluredir=allure-results
            fi
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results/
          retention-days: 5

      - name: Upload artifacts
        if: failure()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            artifacts/
            browserstack_session_id.txt
          retention-days: 5

      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: screenshots/
          retention-days: 5

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `❌ 測試失敗: ${context.workflow} - ${context.job}\n\n` +
              `測試平台: ${{ github.event.inputs.platform || 'android' }}\n` +
              `設備數量: ${{ github.event.inputs.device_count || '1' }}\n` +
              `測試標籤: ${{ github.event.inputs.tags || '全部' }}\n` +
              `詳情: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `測試失敗: ${context.workflow} - ${context.job}`,
              body: message
            });

  generate-report:
    name: Generate Allure Report
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()

    permissions:
      contents: write
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results/

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Allure
        run: |
          curl -o allure-2.24.1.tgz -OL https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.1/allure-commandline-2.24.1.tgz
          tar -zxvf allure-2.24.1.tgz -C /opt/
          ln -s /opt/allure-2.24.1/bin/allure /usr/local/bin/allure

      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report

      # - name: Send test results to Slack
      #   if: always()
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const fs = require('fs');
      #
      #       // 讀取 Allure 報告的統計數據
      #       const summaryJson = fs.readFileSync('allure-report/widgets/summary.json', 'utf8');
      #       const summary = JSON.parse(summaryJson);
      #
      #       // 計算測試時間
      #       const totalDurationSeconds = summary.time.duration / 1000;
      #       const minutes = Math.floor(totalDurationSeconds / 60);
      #       const seconds = Math.floor(totalDurationSeconds % 60);
      #
      #       // 獲取統計數據
      #       const stats = summary.statistic;
      #       const total = stats.total;
      #       const passed = stats.passed;
      #       const failed = stats.failed;
      #       const skipped = stats.skipped;
      #
      #       // 構建 Slack 消息
      #       const platform = '${{ github.event.inputs.platform != '' && github.event.inputs.platform || 'android' }}';
      #       const message = {
      #         blocks: [
      #           {
      #             type: "section",
      #             text: {
      #               type: "mrkdwn",
      #               text: `*${platform.toUpperCase()} APP自動化測試結果 🤖*`
      #             }
      #           },
      #           {
      #             type: "section",
      #             text: {
      #               type: "mrkdwn",
      #               text: `*測試統計*\n• 總計: ${total}\n• 通過: ${passed}\n• 失敗: ${failed}\n• 跳過: ${skipped}\n• 執行時間: ${minutes}分${seconds}秒`
      #             }
      #           },
      #           {
      #             type: "section",
      #             text: {
      #               type: "mrkdwn",
      #               text: `*測試詳情*\n• 測試平台: ${platform}\n• 設備數量: ${{ github.event.inputs.device_count || '1' }}\n• 測試標籤: ${{ github.event.inputs.tags || '全部' }}`
      #             }
      #           },
      #           {
      #             type: "section",
      #             text: {
      #               type: "mrkdwn",
      #               text: `*查看詳細報告*\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
      #             }
      #           }
      #         ]
      #       };
      #
      #       // 發送到 Slack
      #       const slackWebhook = '${{ secrets.SLACK_WEBHOOK_URL }}';
      #       const https = require('https');
      #       const options = {
      #         method: 'POST',
      #         headers: {
      #           'Content-Type': 'application/json'
      #         }
      #       };
      #
      #       const req = https.request(slackWebhook, options);
      #       req.write(JSON.stringify(message));
      #       req.end();

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
